
namespace Njh.Mvc.SourceGenerators

{
    using System;
    using System.Collections.Generic;
#if DEBUG
    using System.Diagnostics;
#endif
    using System.IO;
    using System.Linq;
    using System.Text;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.Text;

    /// <summary>
    /// Implements a source generator to create
    /// a mapping of hashed JS and CSS files.
    /// </summary>
    [Generator]
    public class HashMappingSourceGenerator
        : ISourceGenerator
    {
        private static string cachedDistPath = null;

        private static IEnumerable<string> cachedFiles = null;

        private static IDictionary<string, string> cachedMappings = null;

        /// <summary>
        /// Executes the source generator.
        /// </summary>
        /// <param name="context">
        /// The generation execution context.
        /// </param>
        public void Execute(GeneratorExecutionContext context)
        {
            cachedDistPath = GetCachedDistPath(context);

            cachedMappings = GetCachedMappings(cachedDistPath);

            var source = new StringBuilder(@"// <auto-generated/>
                    namespace Njh.Mvc
                    {
                        using System.Collections.Generic;

                        public static class AssetsFileInfo
                        {
                            public static readonly IDictionary<string, string> HashedFiles = new Dictionary<string, string>()
                            {");

            source.Append(@"
                                ");

            foreach (var mapping in cachedMappings)
            {
                source.AppendLine($@"{{ ""{mapping.Key}"", ""{mapping.Value}"" }},");
            }

            source.Append(@"
                            };
                        }
                    }"
            );

            context.AddSource(
                "AssetsFileInfo.g.cs",
                SourceText.From(
                    source.ToString(),
                    Encoding.UTF8));
        }

        private static IDictionary<string, string> GetCachedMappings(
           string distPath)
        {
            if (cachedMappings == null)
            {
                cachedMappings = GetMappings(distPath);
            }

            return cachedMappings;
        }
        private static IDictionary<string, string> GetMappings(
            string distPath)
        {
            IDictionary<string, string> mappings = null;

            var cachedFiles = GetFiles(distPath);

            foreach (var hashedFile in cachedFiles)
            {
                var extension = Path.GetExtension(hashedFile);

                var filename =
                    Path.GetFileNameWithoutExtension(
                        Path.GetFileNameWithoutExtension(hashedFile));

                var originalFilename = Path.ChangeExtension(filename, extension);

                if (mappings == null)
                {
                    mappings = new Dictionary<string, string>();
                }

                if (!mappings.ContainsKey(originalFilename) &&
                    !string.IsNullOrEmpty(originalFilename) &&
                    !originalFilename.Equals(hashedFile, StringComparison.OrdinalIgnoreCase))
                {
                    mappings.Add(originalFilename, hashedFile);
                }
            }

            return mappings;
        }


        private static IEnumerable<string> GetCachedFiles(
            string distPath)
        {
            if (cachedFiles == null)
            {
                cachedFiles = GetFiles(distPath);
            }

            return cachedFiles;
        }

        private static IEnumerable<string> GetFiles(
            string distPath)
        {
            IList<string> hashedFiles = new List<string>();

            var javaScriptfiles =
                Directory.GetFiles(distPath, "*.js");

            foreach (var jsFile in javaScriptfiles)
            {
                hashedFiles.Add(Path.GetFileName(jsFile));
            }

            var cssfiles =
               Directory.GetFiles(distPath, "*.css");

            foreach (var cssFile in cssfiles)
            {
                hashedFiles.Add(Path.GetFileName(cssFile));
            }

            return hashedFiles;
        }

        private static string GetCachedDistPath(
            GeneratorExecutionContext context)
        {
            if (cachedDistPath == null)
            {
                cachedDistPath = GetDistPath(context);
            }

            return cachedDistPath;
        }

        private static string GetDistPath(
            GeneratorExecutionContext context)
        {
            var finalDistPath = string.Empty;

            var firstSyntaxTree = context.Compilation.SyntaxTrees
                   .FirstOrDefault(x => x.HasCompilationUnitRoot);

            var fullPath =
                firstSyntaxTree?.FilePath ?? string.Empty;

            var path = Path.GetDirectoryName(fullPath);

            var pathRoot = Path
                .GetPathRoot(fullPath)
                .TrimEnd(Path.DirectorySeparatorChar);

            // backtrack to find the wwwroot\dist folder
            while (!path.Equals(pathRoot, StringComparison.OrdinalIgnoreCase))
            {
                var distPath = Path.Combine(path, "wwwroot", "dist");

                if (Directory.Exists(distPath))
                {
                    finalDistPath = distPath;

                    break;
                }
                else
                {
                    var folderName = Path.GetFileName(path);

                    if (folderName.Length > 0)
                    {
                        path = path.Substring(0, path.Length - (folderName.Length + 1));
                    }
                }
            }

            return finalDistPath;

        }

        /// <summary>
        /// Initializes the source generator.
        /// </summary>
        /// <param name="context">
        /// The generatorion initialization context.
        /// </param>
        public void Initialize(GeneratorInitializationContext context)
        {
            //#if DEBUG
            //            if (!Debugger.IsAttached)
            //            {
            //                Debugger.Launch();
            //            }
            //#endif
        }
    }
}
